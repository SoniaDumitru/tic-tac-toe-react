{"version":3,"sources":["components/ChoosePlayer.js","components/Status.js","components/App.js","serviceWorker.js","index.js"],"names":["Player","handleForm","event","preventDefault","props","player","target","value","console","log","this","onSubmit","type","name","React","Component","Status","handleSetPlayer","setPlayer","renderHtml","winner","App","checkWinner","checkMatch","winLines","index","length","a","b","c","board","state","alert","setState","handleClick","newBoard","renderBoxes","map","box","className","onClick","key","reset","Array","fill","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02d4bb8b.chunk.js","sourcesContent":["import React from 'react'\n\nclass Player extends React.Component {\n\nhandleForm =(event)=> {\n  event.preventDefault();\n  this.props.player(event.target.player.value)\n}\n\n\nrender() {\n  console.log(this.props.player)\n  return(\n      <form onSubmit={(event)=>this.handleForm(event)}>\n        <label>\n          <input type=\"radio\" name=\"player\" value=\"X\"/>\n          Player X\n        </label>\n      <label>\n        <input type=\"radio\" name=\"player\" value=\"O\"/>\n          Player O\n      </label>\n      <div>\n        <label>\n          <input type=\"submit\" value=\"Start\"/>\n        </label>\n      </div>\n    </form>\n  )\n}\n}\n\nexport default Player\n","import React from 'react'\nimport Player from './ChoosePlayer.js'\n\nclass Status extends React.Component {\n\n//passing from this App to Status to ChoosePlayer\n  handleSetPlayer =(event)=> {\n    this.props.setPlayer(event)\n  }\n\n  renderHtml =()=> {\n    if (this.props.winner) {\n      return <h2>Winner is {this.props.winner}</h2>\n    } else {\n      return this.props.player ?\n      <h2>Next Player is: {this.props.player}</h2> :\n      <Player player={(event) => this.handleSetPlayer(event)}/>\n    }\n  }\n\n  render() {\n    console.log(this.props.winner);\n    return(\n      <span>\n      {this.renderHtml()}\n      </span>\n    )\n  }\n}\n\nexport default Status\n","import React from 'react';\nimport '../App.css';\nimport Status from './Status.js'\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      board: Array(9).fill(null),\n      player: null,\n      winner: null\n    }\n  }\n\n  checkWinner=()=> {\n      let winLines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    this.checkMatch(winLines)\n  }\n\n  checkMatch =(winLines)=> {\n    for (let index = 0; index < winLines.length; index++) {\n      const [a,b,c] = winLines[index]\n      let board = this.state.board\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n        alert('You Won!')\n        this.setState({\n          winner: this.state.player\n        })\n      }\n    }\n  }\n\n  handleClick =(index)=> {\n    if (this.state.player && !this.state.winner) {\n      let newBoard = this.state.board\n      //we have to have an emplty cell and the winner is not set\n      if(this.state.board[index] === null) {\n        newBoard[index] = this.state.player\n        this.setState({\n          board: newBoard,\n          player: this.state.player === \"X\" ? \"O\" : \"X\"\n        })\n        this.checkWinner()\n    }\n  }\n}\n\n  setPlayer =(player)=> {\n    this.setState({\n      player: player\n    })\n  }\n\n  renderBoxes =()=> {\n    return this.state.board.map(\n      (box, index) =>\n      <div className=\"box\"\n        onClick={() => this.handleClick(index)}\n        key={index}>{box}\n      </div>)\n  }\n\n  reset =()=> {\n    this.setState({\n      player: null,\n      winner: null,\n      board: Array(9).fill(null),\n    })\n  }\n\n  render() {\n\n    return (\n\n      <div className=\"container\">\n            <h1>Tic Tac Toe App</h1>\n          <Status\n            player={this.state.player}\n            setPlayer={(event) => this.setPlayer(event)}\n            winner={this.state.winner}/>\n\n          <div className='board'>\n            {this.renderBoxes()}\n          </div>\n          \n          <div>\n            <button\n            disabled={!this.state.winner}\n            onClick={() => this.reset()}>Reset</button>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}